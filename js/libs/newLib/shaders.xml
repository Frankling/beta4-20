<?xml version="1.0" encoding="UTF-8"?>
<shaders>

	<snippet type="x-shader/x-vertex" id="fur">
		<code  type="x-shader/x-vertex" >
			<![CDATA[
			uniform float offset;
			uniform float globalTime;
			uniform vec3 gravity;

			varying vec2 vUv;
			varying vec3 vNormal;

			const float spacing = 12.0;

			void main() {

				vec3 displacement = vec3(0.0,0.0,0.0);
				vec3 forceDirection = vec3(0.0,0.0,0.0);

				// "wind"
				forceDirection.x = sin(globalTime+position.x*0.05) * 0.2;
				forceDirection.y = cos(globalTime*0.7+position.y*0.04) * 0.2;
				forceDirection.z = sin(globalTime*0.7+position.y*0.04) * 1.2;

				// "gravity"
				displacement = gravity + forceDirection;

				float displacementFactor = pow(offset, 3.0);

				vec3 aNormal = normal;
				aNormal.xyz += displacement*displacementFactor;

				// move outwards depending on offset(layer) and normal+force+gravity
				vec3 animated = vec3( position.x, position.y, position.z )+(normalize(aNormal)*offset*spacing*vec3(1.5,1.5,1.5));

				vNormal = normalize(normal*aNormal);

				vUv = uv*20.0;

				vec4 mvPosition = modelViewMatrix * vec4( animated, 1.0 );

				gl_Position =projectionMatrix * mvPosition;

			}
            ]]>
		</code>
		<code   type="x-shader/x-fragment">
			<![CDATA[
			uniform sampler2D hairMap;
			uniform sampler2D colorMap;
			uniform vec3 color;
			uniform float offset;

			varying vec3 vNormal;

			varying vec2 vUv;

			void main() {

				vec4 hairColor = texture2D(hairMap, vec2(vUv.s, vUv.t));
				vec4 col = texture2D(colorMap, vec2(vUv.s*0.2, vUv.t*0.2));

				// discard no hairs + above the max length
				if (hairColor.a <=0.9|| hairColor.g < offset) {
					discard;
				}

				// darker towards bottom of the hair
				float shadow = mix(0.0,hairColor.b*1.2,offset);

				// light
				vec3 light = vec3(0.1,1.0,0.3);
				float d = pow(max(0.25,dot(vNormal.xyz, light))*2.75, 1.4);

				gl_FragColor = vec4(color*col.xyz*d*shadow, 1.1-offset);

			}
            ]]>
		</code>
	</snippet>
</shaders>